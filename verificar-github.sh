#!/bin/bash

# ===============================================
# VERIFICA√á√ÉO FINAL - PRONTO PARA GITHUB
# ===============================================

echo "üîç VERIFICA√á√ÉO FINAL DO PROJETO"
echo "================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Contadores
ERRORS=0
WARNINGS=0

# Fun√ß√£o para verificar arquivos cr√≠ticos
check_file() {
    if [[ -f "$1" ]]; then
        echo -e "‚úÖ $1"
    else
        echo -e "${RED}‚ùå $1 - FALTANDO${NC}"
        ((ERRORS++))
    fi
}

# Fun√ß√£o para verificar diret√≥rios
check_dir() {
    if [[ -d "$1" ]]; then
        echo -e "‚úÖ $1/"
    else
        echo -e "${YELLOW}‚ö†Ô∏è $1/ - OPCIONAL${NC}"
        ((WARNINGS++))
    fi
}

echo ""
echo "üìÅ ESTRUTURA DE ARQUIVOS ESSENCIAIS"
echo "======================================"

# Arquivos obrigat√≥rios
check_file "package.json"
check_file "README.md"
check_file "LICENSE"
check_file ".gitignore"
check_file ".env.example"
check_file "ecosystem.config.js"
check_file "Dockerfile"

echo ""
echo "üìÇ DIRET√ìRIOS PRINCIPAIS"
echo "========================="

check_dir "src"
check_dir "src/commands"
check_dir "src/commands/util"
check_dir "src/commands/group"
check_dir ".github"
check_dir "docs"

echo ""
echo "üîß ARQUIVOS DE CONFIGURA√á√ÉO"
echo "============================"

check_file "src/index.js"
check_file "src/config.js"
check_file "src/database.js"
check_file "src/logger.js"
check_file "deploy-digitalocean.sh"
check_file "deploy-whatsapp.sh"

echo ""
echo "üìä CONTAGEM DE COMANDOS"
echo "======================="

UTIL_COMMANDS=$(find src/commands/util -name "*.js" -type f 2>/dev/null | wc -l)
GROUP_COMMANDS=$(find src/commands/group -name "*.js" -type f 2>/dev/null | wc -l)
TOTAL_COMMANDS=$((UTIL_COMMANDS + GROUP_COMMANDS))

echo "üìù Comandos /util: $UTIL_COMMANDS"
echo "üë• Comandos /group: $GROUP_COMMANDS"
echo "üéØ Total: $TOTAL_COMMANDS comandos"

echo ""
echo "üîç VERIFICA√á√ïES DE SEGURAN√áA"
echo "============================="

# Verificar se .env n√£o est√° commitado
if [[ -f ".env" ]]; then
    if git check-ignore .env >/dev/null 2>&1; then
        echo "‚úÖ .env ignorado pelo git"
    else
        echo -e "${RED}‚ùå .env N√ÉO est√° no .gitignore!${NC}"
        ((ERRORS++))
    fi
else
    echo "‚úÖ .env n√£o existe (correto para GitHub)"
fi

# Verificar se node_modules est√° ignorado
if git check-ignore node_modules >/dev/null 2>&1; then
    echo "‚úÖ node_modules ignorado pelo git"
else
    echo -e "${YELLOW}‚ö†Ô∏è node_modules pode n√£o estar ignorado${NC}"
    ((WARNINGS++))
fi

# Verificar se logs est√£o ignorados
if git check-ignore logs >/dev/null 2>&1; then
    echo "‚úÖ logs/ ignorado pelo git"
else
    echo -e "${YELLOW}‚ö†Ô∏è logs/ pode n√£o estar ignorado${NC}"
    ((WARNINGS++))
fi

echo ""
echo "üì¶ PACKAGE.JSON"
echo "==============="

# Verificar campos obrigat√≥rios no package.json
if [[ -f "package.json" ]]; then
    if grep -q "\"name\"" package.json; then
        NAME=$(grep "\"name\"" package.json | cut -d'"' -f4)
        echo "‚úÖ Nome: $NAME"
    fi
    
    if grep -q "\"version\"" package.json; then
        VERSION=$(grep "\"version\"" package.json | cut -d'"' -f4)
        echo "‚úÖ Vers√£o: $VERSION"
    fi
    
    if grep -q "\"description\"" package.json; then
        echo "‚úÖ Descri√ß√£o: Presente"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Descri√ß√£o ausente${NC}"
        ((WARNINGS++))
    fi
    
    if grep -q "\"repository\"" package.json; then
        echo "‚úÖ Repository: Configurado"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Repository n√£o configurado${NC}"
        ((WARNINGS++))
    fi
    
    if grep -q "\"license\"" package.json; then
        echo "‚úÖ License: Presente"
    else
        echo -e "${YELLOW}‚ö†Ô∏è License ausente${NC}"
        ((WARNINGS++))
    fi
fi

echo ""
echo "üìñ README.MD"
echo "============"

if [[ -f "README.md" ]]; then
    # Verificar se√ß√µes importantes
    if grep -q "# " README.md; then
        echo "‚úÖ T√≠tulo principal presente"
    fi
    
    if grep -q "## " README.md; then
        echo "‚úÖ Se√ß√µes organizadas"
    fi
    
    if grep -q "npm " README.md; then
        echo "‚úÖ Comandos npm documentados"
    fi
    
    # Contar linhas
    LINES=$(wc -l < README.md)
    echo "üìè Tamanho: $LINES linhas"
    
    if [[ $LINES -gt 100 ]]; then
        echo "‚úÖ Documenta√ß√£o completa"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Documenta√ß√£o pode estar incompleta${NC}"
        ((WARNINGS++))
    fi
fi

echo ""
echo "üö´ GITIGNORE"
echo "============"

if [[ -f ".gitignore" ]]; then
    # Verificar entradas importantes
    ENTRIES=("node_modules" ".env" "logs" "data" "auth_data")
    
    for entry in "${ENTRIES[@]}"; do
        if grep -q "$entry" .gitignore; then
            echo "‚úÖ $entry ignorado"
        else
            echo -e "${YELLOW}‚ö†Ô∏è $entry pode n√£o estar ignorado${NC}"
            ((WARNINGS++))
        fi
    done
fi

echo ""
echo "üóÉÔ∏è TAMANHO DO PROJETO"
echo "====================="

# Calcular tamanho (excluindo node_modules e git)
SIZE=$(du -sh --exclude=node_modules --exclude=.git . 2>/dev/null | cut -f1)
echo "üì¶ Tamanho total: $SIZE"

# Contar arquivos
JS_FILES=$(find . -name "*.js" -not -path "./node_modules/*" -type f | wc -l)
MD_FILES=$(find . -name "*.md" -type f | wc -l)
JSON_FILES=$(find . -name "*.json" -not -path "./node_modules/*" -type f | wc -l)

echo "üìÑ Arquivos .js: $JS_FILES"
echo "üìù Arquivos .md: $MD_FILES"
echo "‚öôÔ∏è Arquivos .json: $JSON_FILES"

echo ""
echo "üéØ RESUMO FINAL"
echo "==============="

if [[ $ERRORS -eq 0 ]]; then
    echo -e "${GREEN}‚úÖ PRONTO PARA GITHUB!${NC}"
    echo -e "${GREEN}‚úÖ Nenhum erro cr√≠tico encontrado${NC}"
else
    echo -e "${RED}‚ùå $ERRORS erro(s) cr√≠tico(s) encontrado(s)${NC}"
    echo -e "${RED}‚ùå CORRIJA ANTES DE ENVIAR AO GITHUB${NC}"
fi

if [[ $WARNINGS -gt 0 ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è $WARNINGS aviso(s) encontrado(s)${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Recomenda-se revisar${NC}"
fi

echo ""
echo "üìã CHECKLIST GITHUB:"
echo "- [ ] git add ."
echo "- [ ] git commit -m \"feat: WhatsApp Bot Enterprise v1.1.0 - Sistema completo\""
echo "- [ ] git push origin main"

echo ""
if [[ $ERRORS -eq 0 ]]; then
    echo -e "${GREEN}üöÄ SISTEMA APROVADO PARA GITHUB!${NC}"
    exit 0
else
    echo -e "${RED}üîß CORRIJA OS ERROS ANTES DE CONTINUAR${NC}"
    exit 1
fi
