#!/bin/bash

# ================================================
# SCRIPT DE VERIFICA√á√ÉO DE VERS√ÉO DO SERVIDOR
# Compara vers√£o local com servidor
# ================================================

echo "üîç VERIFICANDO VERS√ÉO DO SERVIDOR"
echo "================================="
echo "üìç Servidor: 161.35.176.216"
echo "üìÇ Reposit√≥rio: https://github.com/josemar9993/Whats-17-06"
echo ""

# Cores
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}üîç $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# 1. Verificar √∫ltimo commit local
print_info "Verificando √∫ltimo commit local..."
LOCAL_COMMIT=$(git rev-parse HEAD 2>/dev/null)
LOCAL_COMMIT_SHORT=$(git rev-parse --short HEAD 2>/dev/null)
LOCAL_MSG=$(git log -1 --pretty=format:"%s" 2>/dev/null)

if [ -z "$LOCAL_COMMIT" ]; then
    print_error "N√£o foi poss√≠vel obter informa√ß√µes do Git local"
    exit 1
fi

echo "   Hash: $LOCAL_COMMIT_SHORT"
echo "   Mensagem: $LOCAL_MSG"
print_success "Commit local obtido"

# 2. Verificar conectividade SSH
print_info "Verificando conectividade com servidor..."
if ! ssh -o BatchMode=yes -o ConnectTimeout=5 root@161.35.176.216 echo "SSH OK" > /dev/null 2>&1; then
    print_error "N√£o foi poss√≠vel conectar ao servidor via SSH"
    echo "Execute manualmente:"
    echo "ssh root@161.35.176.216 'cd /var/www/html && git log -1 --oneline'"
    exit 1
fi
print_success "SSH conectado"

# 3. Verificar commit do servidor
print_info "Verificando √∫ltimo commit do servidor..."
SERVER_INFO=$(ssh root@161.35.176.216 "cd /var/www/html && git rev-parse HEAD && git rev-parse --short HEAD && git log -1 --pretty=format:'%s'" 2>/dev/null)

if [ -z "$SERVER_INFO" ]; then
    print_error "N√£o foi poss√≠vel obter informa√ß√µes do Git do servidor"
    echo "Executando verifica√ß√£o manual..."
    ssh root@161.35.176.216 "cd /var/www/html && pwd && ls -la && git status"
    exit 1
fi

# Parse das informa√ß√µes do servidor
SERVER_COMMIT=$(echo "$SERVER_INFO" | sed -n '1p')
SERVER_COMMIT_SHORT=$(echo "$SERVER_INFO" | sed -n '2p')
SERVER_MSG=$(echo "$SERVER_INFO" | sed -n '3p')

echo "   Hash: $SERVER_COMMIT_SHORT"
echo "   Mensagem: $SERVER_MSG"
print_success "Commit do servidor obtido"

# 4. Comparar vers√µes
echo ""
echo "üìä COMPARA√á√ÉO DE VERS√ïES:"
echo "========================="
echo "üñ•Ô∏è  LOCAL:    $LOCAL_COMMIT_SHORT - $LOCAL_MSG"
echo "üåê SERVIDOR: $SERVER_COMMIT_SHORT - $SERVER_MSG"
echo ""

if [ "$LOCAL_COMMIT" = "$SERVER_COMMIT" ]; then
    print_success "SERVIDOR EST√Å ATUALIZADO!"
    echo "   ‚úÖ Ambos t√™m o mesmo commit: $LOCAL_COMMIT_SHORT"
    echo "   ‚úÖ N√£o √© necess√°rio fazer deploy"
else
    print_warning "SERVIDOR DESATUALIZADO!"
    echo "   ‚ö†Ô∏è  Local:    $LOCAL_COMMIT_SHORT"
    echo "   ‚ö†Ô∏è  Servidor: $SERVER_COMMIT_SHORT"
    echo ""
    echo "üöÄ A√á√ïES RECOMENDADAS:"
    echo "1. Execute o deploy automatizado:"
    echo "   ./deploy-automatico-servidor.sh"
    echo ""
    echo "2. Ou atualize manualmente:"
    echo "   ssh root@161.35.176.216"
    echo "   cd /var/www/html"
    echo "   git pull"
    echo "   pm2 restart whatsapp-bot"
fi

# 5. Verificar arquivos cr√≠ticos recentes
print_info "Verificando arquivos cr√≠ticos no servidor..."
ssh root@161.35.176.216 "
    cd /var/www/html
    echo 'üìÅ ARQUIVOS CR√çTICOS:'
    [ -f 'populate-database.js' ] && echo '‚úÖ populate-database.js existe' || echo '‚ùå populate-database.js FALTANDO'
    [ -f 'deploy-automatico-servidor.sh' ] && echo '‚úÖ deploy-automatico-servidor.sh existe' || echo '‚ùå deploy-automatico-servidor.sh FALTANDO'
    [ -f 'test-servidor-completo.sh' ] && echo '‚úÖ test-servidor-completo.sh existe' || echo '‚ùå test-servidor-completo.sh FALTANDO'
    [ -f 'test-comandos-whatsapp.js' ] && echo '‚úÖ test-comandos-whatsapp.js existe' || echo '‚ùå test-comandos-whatsapp.js FALTANDO'
    
    echo ''
    echo 'üìä STATUS PM2:'
    pm2 status 2>/dev/null || echo 'PM2 n√£o est√° rodando ou n√£o instalado'
    
    echo ''
    echo 'üìù √öLTIMOS LOGS (se dispon√≠vel):'
    pm2 logs whatsapp-bot --lines 3 --nostream 2>/dev/null || echo 'Logs n√£o dispon√≠veis'
"

# 6. Verificar se precisa de deploy
echo ""
if [ "$LOCAL_COMMIT" != "$SERVER_COMMIT" ]; then
    echo "üîÑ VERIFICANDO DIFEREN√áAS:"
    echo "=========================="
    
    # Mostrar commits que o servidor n√£o tem
    print_info "Commits que o servidor n√£o possui:"
    git log --oneline "${SERVER_COMMIT}..${LOCAL_COMMIT}" 2>/dev/null || echo "N√£o foi poss√≠vel comparar commits"
    
    echo ""
    print_warning "RECOMENDA√á√ÉO: Execute o deploy para atualizar o servidor!"
    echo ""
    echo "üöÄ COMANDO PARA ATUALIZAR:"
    echo "./deploy-automatico-servidor.sh"
else
    echo ""
    print_success "üéâ SERVIDOR EST√Å NA VERS√ÉO MAIS RECENTE!"
    echo ""
    echo "üìã VERIFICA√á√ïES ADICIONAIS RECOMENDADAS:"
    echo "‚Ä¢ Status do PM2: pm2 status"
    echo "‚Ä¢ Health check: curl http://161.35.176.216:8080/health"
    echo "‚Ä¢ Logs recentes: pm2 logs whatsapp-bot --lines 20"
fi

echo ""
echo "üìä RESUMO:"
echo "=========="
echo "Local:    $LOCAL_COMMIT_SHORT"
echo "Servidor: $SERVER_COMMIT_SHORT"
echo "Status:   $([ "$LOCAL_COMMIT" = "$SERVER_COMMIT" ] && echo "‚úÖ ATUALIZADO" || echo "‚ö†Ô∏è  PRECISA ATUALIZAR")"
